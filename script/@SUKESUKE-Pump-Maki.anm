@線形
--track0:ー,0,2,0
--track1:ー,0,2,0
--track2:ー,0,2,0
--track3:ー,0,1,0
--dialog:名前,name="m0";座標,pos={};　,apos={};
--check0:位置確認,1
--
--=====================================
do
    DEBUG = true;
    EDIT = obj.check0;
    require("lib_Parse");
    require("lib_Editor");
    require("lib_Util");
    require("lib_Color");
    require("lib_Debug");
    require("lib_Sunshine");
    obj.pixeloption("blend",0);
    --アンカーで座標指定
    local POINT_SIZE = 4;
    local OFFSET = 4;
    local w, h = obj.getpixel();
    obj.setanchor("apos", 2, "line");
    Util.AnchorShift(apos, pos, w/2, h/2);
    Editor.Point(pos[1][1]-OFFSET, pos[1][2], POINT_SIZE, Color.WHITE, 1);
    Editor.Point(pos[2][1]-OFFSET, pos[2][2], POINT_SIZE, Color.RED, 1);
    --サンプリングするピクセル
    local start = pos[1];
    local stop = pos[2];
    local samplePx = Parse.BetweenPixcel(start, stop);
    --解析
    local rate = Parse.ParseColor(samplePx, Sunshine.TankParse);
    Debug.Log(Util.Round(rate * 100) .. "%");
    --通信変数
    if WALLSTUDIO_COMMUNICATION_VALUE == nil then
        WALLSTUDIO_COMMUNICATION_VALUE = {};
    end
    WALLSTUDIO_COMMUNICATION_VALUE[name] = rate;
end
--=====================================
@円形
--track0:頂点数,0,8,8
--track1:ー,0,2,0
--track2:ー,0,2,0
--track3:ー,0,1,0
--dialog:名前,name="m1";座標,pos={};　,apos={};
--check0:位置確認,1
--
--=====================================
do
    DEBUG = true;
    EDIT = obj.check0;
    require("lib_Parse");
    require("lib_Editor");
    require("lib_Util");
    require("lib_Color");
    require("lib_Debug");
    require("lib_Sunshine");
    obj.pixeloption("blend",0);
    --アンカーで座標指定
    local POINT_SIZE = 4;
    local OFFSET = 4;
    local ANCHOR_COUNT = 8--tonumber(obj.track0);
    local w, h = obj.getpixel();
    obj.setanchor("apos", ANCHOR_COUNT, "line");
    Util.AnchorShift(apos, pos, w/2, h/2);
    for i=1,ANCHOR_COUNT-1 do
        Editor.Point(pos[i][1]-OFFSET, pos[i][2], POINT_SIZE, Color.WHITE, 1);
    end
    Editor.Point(pos[ANCHOR_COUNT][1]-OFFSET, pos[ANCHOR_COUNT][2], POINT_SIZE, Color.RED, 1);
    --サンプリングするピクセル
    local samplePx = pos;
    --解析
    local rate = Util.Round(Parse.ParseColor(samplePx, Sunshine.HpParse)* ANCHOR_COUNT);
    Debug.Log(rate .. "個");
    --通信変数
    if WALLSTUDIO_COMMUNICATION_VALUE == nil then
        WALLSTUDIO_COMMUNICATION_VALUE = {};
    end
    WALLSTUDIO_COMMUNICATION_VALUE[name] = rate;
end
--=====================================
@タンク
--track0:ー,0,1,0
--track1:ー,0,1,0
--track2:ー,0,1,0
--track3:ー,0,1,0
--dialog:名前,name="m0";対象,dst="alpha";曲線,carve="Logistic";
--
--=====================================
do
    require("lib_Parse");
    require("lib_Editor");
    require("lib_Util");
    require("lib_Color");
    require("lib_Debug");
    require("lib_Sunshine");
    obj[dst] = Util[carve](WALLSTUDIO_COMMUNICATION_VALUE[name]);
end
--=====================================
@HP
--track0:破れの大きさ,0,1500,500
--track1:ｵﾌｾｯﾄX,-1000,1000,0
--track2:ｵﾌｾｯﾄY,-1000,1000,0
--track3:ばらけ,0,100,50
--dialog:名前,name="m1";固有名,uniName="b0";シード,seed=114514;座標,pos={};　,apos={};
--check0:ランダム,0
--
--=====================================
do
    require("lib_Parse");
    require("lib_Editor");
    require("lib_Util");
    require("lib_Color");
    require("lib_Debug");
    require("lib_Sunshine");
    local MAX_HP = 8;
    local RANDOM_COUNT = 16;
    local WCV = WALLSTUDIO_COMMUNICATION_VALUE;
    local w, h = obj.getpixel();
    --バッファー関係の初期化切り分け
    if WCV[uniName] == nil then
        WCV[uniName] = {};
        WCV[uniName]["diffusion"] = obj.track3;
        WCV[uniName]["random"] = Util.MakeRandomDoubleTable(RANDOM_COUNT, Util.Round(w*obj.track3/100), Util.Round(w*(1-obj.track3/100)), seed);
        WCV[uniName]["breakTime"] = -60;
    else
        if WCV[uniName]["diffusion"] ~= obj.track3 then
            WCV[uniName]["random"] = Util.MakeRandomDoubleTable(RANDOM_COUNT, Util.Round(w*obj.track3/100), Util.Round(w*(1-obj.track3/100)), seed);
        end
        if WCV[uniName]["buffer"] > WCV[name] then
            Debug.Log("大破");
            WCV[uniName]["breakTime"] = obj.time;
        end       
    end
    if obj.check0 then
        Util.BreakMask(MAX_HP - WCV[name], WCV[uniName]["random"], obj.track1, obj.track2, obj.track0, MAX_HP);
    else
        --手動用のアンカー
        obj.setanchor("apos", MAX_HP, "line");
        Util.AnchorShift(apos, pos, 0, 0); --シフト要らなかった？
        Util.BreakMask(MAX_HP - WCV[name], Util.MatrixTranspos(pos), obj.track1, obj.track2, obj.track0, MAX_HP);
    end
    obj.drawpoly(-obj.w/2,-obj.h/2,0, obj.w/2,-obj.h/2,0, obj.w/2,obj.h/2,0, -obj.w/2,obj.h/2,0);
    Util.BreakDown(WCV[uniName]["breakTime"], obj);
    WCV[uniName]["buffer"] = WCV[name];
    WCV[uniName]["diffusion"] = obj.track3;
end
--=====================================
@放水音解析
--track0:ｵﾌｾｯﾄX,-1000,1000,100
--track1:ｵﾌｾｯﾄY,-1000,1000,500
--track2:拡大X,0,10,1
--track3:拡大Y,0,10,1.4
--dialog:名前,name="g0";バッファ数,bufferCount=32;バッファ数2,deltaBufferCount=32;分割数,division=512;点サイズ,dotSize=4;閾値,borderValue=25;
--check0:学習,0
--
--=====================================
do
    require("lib_Parse");
    require("lib_Editor");
    require("lib_Util");
    require("lib_Color");
    require("lib_Debug");
    require("lib_Sunshine");
    DEBUG = true;
    EDIT = true;
    LARNING = obj.check0;
    obj.pixeloption("blend",0);
    local shiftX = obj.track0;
    local shiftY = obj.track1;
    local scaleX = obj.track2;
    local scaleY = obj.track3;
    
    -- 通信変数とバッファー
    if WALLSTUDIO_COMMUNICATION_VALUE == nil then
        WALLSTUDIO_COMMUNICATION_VALUE = {};
    end
    if WALLSTUDIO_COMMUNICATION_VALUE[name] == nil or WALLSTUDIO_COMMUNICATION_VALUE[name]["divide"] ~= division then
        WALLSTUDIO_COMMUNICATION_VALUE[name] = {};
        WALLSTUDIO_COMMUNICATION_VALUE[name]["divide"] = division;
        WALLSTUDIO_COMMUNICATION_VALUE[name]["buffer"] = Util.InitTableReplece(Util.InitTableReplece(0, division),bufferCount);
        WALLSTUDIO_COMMUNICATION_VALUE[name]["moment"] = Util.InitTableReplece(0, division);
        WALLSTUDIO_COMMUNICATION_VALUE[name]["deltaBuffer"] = Util.InitTableReplece(Util.InitTableReplece(0, division), deltaBufferCount);
        WALLSTUDIO_COMMUNICATION_VALUE[name]["learn"] = Util.InitTableReplece(0, division);
        WALLSTUDIO_COMMUNICATION_VALUE[name]["learnCount"] = 0;
        WALLSTUDIO_COMMUNICATION_VALUE[name]["frame"] = 0;
        WALLSTUDIO_COMMUNICATION_VALUE[name]["corelation"] = 0;
    end
    local WCV = WALLSTUDIO_COMMUNICATION_VALUE[name];
    -- 解析
    local spectrum = Util.GetSpectrum(obj, division);
    Util.TubeTableAdd(WCV["buffer"], spectrum, bufferCount);
    local moment = Util.TableAverage(WCV["buffer"], bufferCount);
    local deltaMoment = Util.DiffTable(moment, WCV["moment"]);
    Util.TubeTableAdd(WCV["deltaBuffer"], deltaMoment, deltaBufferCount);
    local momentMoment = Util.TableAverage(WCV["deltaBuffer"], deltaBufferCount);
    local border = Util.ScaleTable(Sunshine.ShotSoundBorderFunc(1,512,512), 0.3);
    local corelation = Util.CrossCorelation(border,moment,0);
    local color = Color.GRAY;
    if(corelation > borderValue*100000) then color = Color.SKYBLUE end
    -- 学習
    if LARNING then
        WCV["learn"] = Util.ScaleTable(WCV["learn"], WCV["learnCount"]);
        WCV["learnCount"] = WCV["learnCount"] + 1;
        WCV["learn"] = Util.ScaleTable(Util.AddTable(WCV["learn"], moment), 1/WCV["learnCount"]);
        WCV["frame"] = WCV["frame"] + 1;
        if WCV["frame"]%60 < 1 then
            Util.FileDump("plugins/script/Statistics.txt", table.concat(WCV["learn"], ","), "a");
        end
    end
    -- グラフに表示
    Debug.ShowDisplayValueTable(WCV["learn"], shiftX, shiftY, dotSize, scaleX, scaleY, Color.PURPLE, 1);
    Debug.ShowDisplayValueTable(moment, shiftX, shiftY, dotSize, scaleX, scaleY, Color.RED, 1);
    Debug.ShowDisplayValueTable(deltaMoment, shiftX, shiftY, dotSize, scaleX, scaleY, Color.WHITE, 1);
    Debug.ShowDisplayValueTable(momentMoment, shiftX, shiftY, dotSize, scaleX, scaleY, Color.YELLOW, 1);
    Debug.ShowDisplayValueTable(border, shiftX, shiftY, dotSize, scaleX, scaleY, color, 1);
    -- 次のフレームへ値を送信
    WCV["moment"] = moment;
    WCV["corelation"] = corelation;
end
--=====================================
@放水
--track0:ー,0,1,0
--track1:ー,0,1,0
--track2:ー,0,1,0
--track3:閾値,0,200,25
--dialog:名前,name="g0";対象,dst="alpha";曲線,carve="Logistic";
--
--=====================================
do
    require("lib_Parse");
    require("lib_Editor");
    require("lib_Util");
    require("lib_Color");
    require("lib_Debug");
    require("lib_Sunshine");
    if WALLSTUDIO_COMMUNICATION_VALUE[name]["corelation"] > obj.track3*100000 then
        obj[dst] = 1;
    else
        obj[dst] = 0;
    end
end